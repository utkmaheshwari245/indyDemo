========================================
================ Set Up ================
========================================
Initialize Pool
    System -> Create pool with ledger config
    System -> Open pool
Initialize Government
    Government -> Create wallet
    Government -> Create did and key and store in wallet
Initialize SEC
    government -> Create pairwise did and key for sec and store in wallet
    government -> Send the pairwise did and key to ledger
    government -> Create connection request for sec with the pairwise did and a nonce
    government -> Send connection request to sec
    ====================================
    sec -> Create wallet
    sec -> Create pairwise did and key for government and store in wallet
    sec -> Create connection response for government with the pairwise did and key and the nonce
    sec -> Get government's pairwise key from ledger
    sec -> Encrypt connection response with government's pairwise key
    sec -> Send connection response to government
    ====================================
    government -> Decrypt connection response from sec
    government -> Compare nonce in response with original nonce for validation
    government -> Send sec's pairwise did and key to ledger
    ====================================
    sec -> Create did and key and store in wallet
    sec -> Create message info with the did and key
    sec -> Encrypt the message and it's own pairwise key with government's pairwise key
    sec -> Send encrypted message to government
    ====================================
    government -> Decrypt message from sec
    government -> Get sec's pairwise key from ledger and validate with sender's pairwise key in decrypted message
    government -> Send sec's did and key to ledger
Initialize General Auditor
    government -> Create pairwise did and key for general_auditor and store in wallet
    government -> Send the pairwise did and key to ledger
    government -> Create connection request for general_auditor with the pairwise did and a nonce
    government -> Send connection request to general_auditor
    ====================================
    general_auditor -> Create wallet
    general_auditor -> Create pairwise did and key for government and store in wallet
    general_auditor -> Create connection response for government with the pairwise did and key and the nonce
    general_auditor -> Get government's pairwise key from ledger
    general_auditor -> Encrypt connection response with government's pairwise key
    general_auditor -> Send connection response to government
    ====================================
    government -> Decrypt connection response from general_auditor
    government -> Compare nonce in response with original nonce for validation
    government -> Send general_auditor's pairwise did and key to ledger
    ====================================
    general_auditor -> Create did and key and store in wallet
    general_auditor -> Create message info with the did and key
    general_auditor -> Encrypt the message and it's own pairwise key with government's pairwise key
    general_auditor -> Send encrypted message to government
    ====================================
    government -> Decrypt message from general_auditor
    government -> Get general_auditor's pairwise key from ledger and validate with sender's pairwise key in decrypted message
    government -> Send general_auditor's did and key to ledger
Initialize Financial Auditor
    government -> Create pairwise did and key for financial_auditor and store in wallet
    government -> Send the pairwise did and key to ledger
    government -> Create connection request for financial_auditor with the pairwise did and a nonce
    government -> Send connection request to financial_auditor
    ====================================
    financial_auditor -> Create wallet
    financial_auditor -> Create pairwise did and key for government and store in wallet
    financial_auditor -> Create connection response for government with the pairwise did and key and the nonce
    financial_auditor -> Get government's pairwise key from ledger
    financial_auditor -> Encrypt connection response with government's pairwise key
    financial_auditor -> Send connection response to government
    ====================================
    government -> Decrypt connection response from financial_auditor
    government -> Compare nonce in response with original nonce for validation
    government -> Send financial_auditor's pairwise did and key to ledger
    ====================================
    financial_auditor -> Create did and key and store in wallet
    financial_auditor -> Create message info with the did and key
    financial_auditor -> Encrypt the message and it's own pairwise key with government's pairwise key
    financial_auditor -> Send encrypted message to government
    ====================================
    government -> Decrypt message from financial_auditor
    government -> Get financial_auditor's pairwise key from ledger and validate with sender's pairwise key in decrypted message
    government -> Send financial_auditor's did and key to ledger
Initialize Goldman Sachs
    government -> Create pairwise did and key for goldman_sachs and store in wallet
    government -> Send the pairwise did and key to ledger
    government -> Create connection request for goldman_sachs with the pairwise did and a nonce
    government -> Send connection request to goldman_sachs
    ====================================
    goldman_sachs -> Create wallet
    goldman_sachs -> Create pairwise did and key for government and store in wallet
    goldman_sachs -> Create connection response for government with the pairwise did and key and the nonce
    goldman_sachs -> Get government's pairwise key from ledger
    goldman_sachs -> Encrypt connection response with government's pairwise key
    goldman_sachs -> Send connection response to government
    ====================================
    government -> Decrypt connection response from goldman_sachs
    government -> Compare nonce in response with original nonce for validation
    government -> Send goldman_sachs's pairwise did and key to ledger
    ====================================
    goldman_sachs -> Create did and key and store in wallet
    goldman_sachs -> Create message info with the did and key
    goldman_sachs -> Encrypt the message and it's own pairwise key with government's pairwise key
    goldman_sachs -> Send encrypted message to government
    ====================================
    government -> Decrypt message from goldman_sachs
    government -> Get goldman_sachs's pairwise key from ledger and validate with sender's pairwise key in decrypted message
    government -> Send goldman_sachs's did and key to ledger
========================================
============== Start Demo ==============
========================================
SEC -> Create General KYC Credential Schema
SEC -> Send General KYC Credential Schema to Ledger
SEC -> Create Financial KYC Credential Schema
SEC -> Send Financial KYC Credential Schema to Ledger
========================================
General Auditor -> Get General KYC Schema from Ledger
General Auditor -> Create and Store General KYC Credential Definition in Wallet
General Auditor -> Send General KYC Credential Definition to Ledger
========================================
Financial Auditor -> Get Financial KYC Schema from Ledger
Financial Auditor -> Create and Store Financial KYC Credential Definition in Wallet
Financial Auditor -> Send Financial KYC Credential Definition to Ledger
========================================
General Auditor -> Establish p2p connection with JP Morgan
    general_auditor -> Create pairwise did and key for jp_morgan and store in wallet
    general_auditor -> Send the pairwise did and key to ledger
    general_auditor -> Create connection request for jp_morgan with the pairwise did and a nonce
    general_auditor -> Send connection request to jp_morgan
    ====================================
    jp_morgan -> Create wallet
    jp_morgan -> Create pairwise did and key for general_auditor and store in wallet
    jp_morgan -> Create connection response for general_auditor with the pairwise did and key and the nonce
    jp_morgan -> Get general_auditor's pairwise key from ledger
    jp_morgan -> Encrypt connection response with general_auditor's pairwise key
    jp_morgan -> Send connection response to general_auditor
    ====================================
    general_auditor -> Decrypt connection response from jp_morgan
    general_auditor -> Compare nonce in response with original nonce for validation
    general_auditor -> Send jp_morgan's pairwise did and key to ledger
General Auditor -> Create General KYC Credential Offer for JP Morgan
General Auditor -> Encrypt General KYC Credential Offer with JP Morgan's key
General Auditor -> Send Encrypted General KYC Credential Offer to JP Morgan
========================================
Financial Auditor -> Establish p2p connection with JP Morgan
    financial_auditor -> Create pairwise did and key for jp_morgan and store in wallet
    financial_auditor -> Send the pairwise did and key to ledger
    financial_auditor -> Create connection request for jp_morgan with the pairwise did and a nonce
    financial_auditor -> Send connection request to jp_morgan
    ====================================
    jp_morgan -> Create wallet
    jp_morgan -> Create pairwise did and key for financial_auditor and store in wallet
    jp_morgan -> Create connection response for financial_auditor with the pairwise did and key and the nonce
    jp_morgan -> Get financial_auditor's pairwise key from ledger
    jp_morgan -> Encrypt connection response with financial_auditor's pairwise key
    jp_morgan -> Send connection response to financial_auditor
    ====================================
    financial_auditor -> Decrypt connection response from jp_morgan
    financial_auditor -> Compare nonce in response with original nonce for validation
    financial_auditor -> Send jp_morgan's pairwise did and key to ledger
Financial Auditor -> Create Financial KYC Credential Offer for JP Morgan
Financial Auditor -> Encrypt Financial KYC Credential Offer with JP Morgan's key
Financial Auditor -> Send Encrypted Financial KYC Credential Offer to JP Morgan
========================================
JP Morgan -> Create and Store Master Secret in Wallet
JP Morgan -> Decrypt General KYC Credential Offer from General Auditor
JP Morgan -> Get General KYC Credential Definition from Ledger
JP Morgan -> Create General KYC Credential Request for General Auditor
JP Morgan -> Encrypt General KYC Credential Request with General Auditor's key
JP Morgan -> Send encrypted General KYC Credential Request to General Auditor
JP Morgan -> Decrypt Financial KYC Credential Offer from Financial Auditor
JP Morgan -> Get Financial KYC Credential Definition from Ledger
JP Morgan -> Create Financial KYC Credential Request for Financial Auditor
JP Morgan -> Encrypt Financial KYC Credential Request with Financial Auditor's key
JP Morgan -> Send encrypted Financial KYC Credential Request to Financial Auditor
========================================
General Auditor -> Decrypt General KYC Credential Request from JP Morgan
General Auditor -> Create General KYC Credential for JP Morgan
General Auditor -> Encrypt General KYC Credential for JP Morgan
General Auditor -> Send encrypted General KYC Credential to JP Morgan
========================================
Financial Auditor -> Decrypt Financial KYC Credential Request from JP Morgan
Financial Auditor -> Create Financial KYC Credential for JP Morgan
Financial Auditor -> Encrypt Financial KYC Credential for JP Morgan
Financial Auditor -> Send encrypted Financial KYC Credential to JP Morgan
========================================
JP Morgan -> Decrypt General KYC Credential from General Auditor
JP Morgan -> Get General KYC Credential Definition from Ledger
JP Morgan -> Store General KYC Credential in Wallet
JP Morgan -> Decrypt Financial KYC Credential from Financial Auditor
JP Morgan -> Get Financial KYC Credential Definition from Ledger
JP Morgan -> Store Financial KYC Credential in Wallet
========================================
Goldman Sachs -> Establish p2p connection with JP Morgan
    goldman_sachs -> Create pairwise did and key for jp_morgan and store in wallet
    goldman_sachs -> Send the pairwise did and key to ledger
    goldman_sachs -> Create connection request for jp_morgan with the pairwise did and a nonce
    goldman_sachs -> Send connection request to jp_morgan
    ====================================
    jp_morgan -> Create wallet
    jp_morgan -> Create pairwise did and key for goldman_sachs and store in wallet
    jp_morgan -> Create connection response for goldman_sachs with the pairwise did and key and the nonce
    jp_morgan -> Get goldman_sachs's pairwise key from ledger
    jp_morgan -> Encrypt connection response with goldman_sachs's pairwise key
    jp_morgan -> Send connection response to goldman_sachs
    ====================================
    goldman_sachs -> Decrypt connection response from jp_morgan
    goldman_sachs -> Compare nonce in response with original nonce for validation
    goldman_sachs -> Send jp_morgan's pairwise did and key to ledger
Goldman Sachs -> Get JP Morgan's key
Goldman Sachs -> Create General KYC Credential Proof Request
Goldman Sachs -> Encrypt General KYC Credential Proof Request with JP Morgan's key
Goldman Sachs -> Send encrypted General KYC Credential Proof Request to JP Morgan
Goldman Sachs -> Create Financial KYC Credential Proof Request
Goldman Sachs -> Encrypt Financial KYC Credential Proof Request with JP Morgan's key
Goldman Sachs -> Send encrypted Financial KYC Credential Proof Request to JP Morgan
========================================
JP Morgan -> Decrypt General KYC Credential Proof Request from Goldman Sachs
JP Morgan -> Get credentials for General KYC Credential Proof Request
JP Morgan -> Create General KYC Credential Proof
JP Morgan -> Encrypt General KYC Credential Proof for Goldman Sachs
JP Morgan -> Send encrypted General KYC Credential Proof to Goldman Sachs
JP Morgan -> Decrypt Financial KYC Credential Proof Request from Goldman Sachs
JP Morgan -> Get credentials for Financial KYC Credential Proof Request
JP Morgan -> Create Financial KYC Credential Proof
JP Morgan -> Encrypt Financial KYC Credential Proof for Goldman Sachs
JP Morgan -> Send encrypted Financial KYC Credential Proof to Goldman Sachs
========================================
Goldman Sachs -> Decrypt General KYC Credential Proof from JP Morgan
Goldman Sachs -> Verify General KYC Credential Proof from JP Morgan
Goldman Sachs -> Decrypt Financial KYC Credential Proof from JP Morgan
Goldman Sachs -> Verify Financial KYC Credential Proof from JP Morgan
========================================
Close and Delete Government's Wallet
Close and Delete SEC's Wallet
Close and Delete General Auditor's Wallet
Close and Delete Financial Auditor's Wallet
Close and Delete Goldman Sachs's Wallet
Close and Delete JP Morgan's Wallet
Close and Delete Pool
========================================
=============== End Demo ===============
========================================